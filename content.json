[{"title":"test","date":"2019-06-04T02:10:00.000Z","path":"2019/06/04/test/","text":"我要测试","tags":[{"name":"测试","slug":"测试","permalink":"https://blog.zhaoziwen.com.cn/tags/测试/"}]},{"title":"hexo博客搭建","date":"2019-06-03T03:51:44.000Z","path":"2019/06/03/start-hexo/","text":"安装NodeJS和NPM1curl --silent --location https://rpm.nodesource.com/setup_10.x | sudo bash - 1yum install -y nodejs 安装Nginx1vim /etc/yum.repos.d/nginx.repo 将以下内容拷贝进去 12345[nginx]name=nginx repobaseurl=http://nginx.org/packages/centos/$releasever/$basearch/gpgcheck=0enabled=1 安装 1yum install nginx -y 由于centos默认自带防火墙，所以这里需要关闭防火墙才能访问 123systemctl start firewalld.service #启动firewallsystemctl stop firewalld.service #停止firewallsystemctl disable firewalld.service #禁止firewall开机启动 安装git并设置1234yum install git #安装gitssh-keygen -t rsa -b 4096 -C \"xxxxx@xxx.com\" #生成公钥cat ~/.ssh/id_rsa.pub #查看公钥，并把它复制到github账户中 拉取仓库并配置nginx123git clone ...vim /etc/nginx/conf.d/hexo.conf 写入下列相应配置 12345678server &#123; listen 80; server_name blog.zhaoziwen.com.cn; location / &#123; root /root/zhaowenzi.github.io; index index.html; &#125;&#125; 重启生效 1nginx -s reload 修改nginx权限 1234vim /etc/nginx/nginx.conf#将user nginx; 改为 user root; #然后再次重启 配置webhooks自动更新博客安装依赖库 1npm install -g github-webhook-handler 配置webhook.js 1vim webhooks.js 将下面的配置写入上面的文件 12345678910111213141516171819202122232425262728293031var http = require('http')var createHandler = require('github-webhook-handler')var handler = createHandler(&#123; path: '/webhooks_push', secret: '***' &#125;)// 上面的 secret 保持和 GitHub 后台设置的一致function run_cmd(cmd, args, callback) &#123; var spawn = require('child_process').spawn; var child = spawn(cmd, args); var resp = \"\"; child.stdout.on('data', function(buffer) &#123; resp += buffer.toString(); &#125;); child.stdout.on('end', function() &#123; callback (resp) &#125;);&#125;http.createServer(function (req, res) &#123; handler(req, res, function (err) &#123; res.statusCode = 404 res.end('no such location') &#125;)&#125;).listen(6666)handler.on('error', function (err) &#123; console.error('Error:', err.message)&#125;)handler.on('push', function (event) &#123; console.log('Received a push event for %s to %s', event.payload.repository.name, event.payload.ref); run_cmd('sh', ['./deploy.sh'], function(text)&#123; console.log(text) &#125;);&#125;) 配置./deploy.sh 1vim deploy.sh 写入 12cd ~/zhaowenzi.github.iogit pull 用pm2来实现守护进程 1npm install pm2 --global 通过pm2启动webhooks.js 1pm2 start webhooks.js 全站HTTPS通过Certbot傻瓜操作 123wget https://dl.eff.org/certbot-autochmod a+x certbot-autosudo ./certbot-auto --nginx 通过crontab定时任务自动更新 1crontab -e 添加下面这条命令 10 0 * * 0 /root/certbot-auto renew 即每周日的0点0分执行更新证书的命令","tags":[{"name":"hexo","slug":"hexo","permalink":"https://blog.zhaoziwen.com.cn/tags/hexo/"}]},{"title":"Hello World","date":"2019-06-02T16:01:41.400Z","path":"2019/06/03/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]},{"title":"堆及相关操作","date":"2019-05-26T14:23:57.000Z","path":"2019/05/26/heap/","text":"列举一些堆及相关操作的代码 相关数据结构 12345678910struct TreeNode &#123; int Weight = 0; TreeNode *Left = nullptr; TreeNode *Right = nullptr;&#125;struct HeapNode &#123; TreeNode Data[MaxNum]; int size = 0;&#125; 创建一个小根堆 12345HeapNode *CreateHeap(int N) &#123; HeapNode *H = new(HeapNode); H-&gt;Data[0].Weight = -1; //第一个作为哨兵，从1开始计数 return H;&#125; 从堆中删除一个结点 12345678910111213141516171819202122TreeNode *DeleteMin(HeapNode *H) &#123; int Parent = 0, Child = 0; TreeNode temp; TreeNode *MinItem = new(TreeNode); *MinItem = H-&gt;Data[1]; temp = (H-&gt;Data[(H-&gt;Size)--]); for(Parent = 1; Parent * 2 &lt;= H-&gt;Size; Parent = Child) &#123; Child = Parent * 2; if((Child != H-&gt;Size) &amp;&amp; ((H-&gt;Data[Child].Weight) &gt; (H-&gt;Data[Child+1].Weight))) &#123; //找到最小的子结点 Child++; &#125; if((temp.Weight) &lt;= (H-&gt;Data[Child].Weight)) &#123; break; &#125; else &#123; H-&gt;Data[Parent] = H-&gt;Data[Child]; //把最小的值放到其父节点，执行Parent = Child并循环 &#125; &#125; H-&gt;Data[Parent] = temp; return MinItem;&#125; 在堆中插入一个结点 12345678void Insert(HeapNode *H, TreeNode *item) &#123; int i = 0; i = ++(H-&gt;Size); for(; H-&gt;Data[i/2].Weight &gt; item-&gt;Weight; i/=2) &#123; H-&gt;Data[i] = H-&gt;Data[i/2]; &#125; H-&gt;Data[i] = *item;&#125; 将小根堆转化为哈夫曼树 12345678910111213TreeNode *Huffman(HeapNode *H) &#123; TreeNode *T = nullptr; int num = H-&gt;Size; for(int i = 0; i &lt; num - 1; ++i) &#123; T = new(TreeNode); T-&gt;Left = DeleteMin(H); T-&gt;Right = DeleteMin(H); T-&gt;Weight = T-&gt;Left-&gt;Weight + T-&gt;Right-&gt;Weight; Insert(H, T); //注意：此时是把堆中最小的两个结点结合成一个结点，并重新插回小根堆 &#125; T = DeleteMin(H); //注意：此时堆中只有一个结点，这个节点即是哈夫曼树 return T;&#125; 计算WPL 12345678int WPL(TreeNode *T, int Depth) &#123; if((T-&gt;Left = nullptr) &amp;&amp; (T-&gt;Right == nullptr)) &#123; return Depth*(T-&gt;Weight); &#125; else &#123; return (WPL(T-&gt;Left, Depth + 1) + WPL(T-&gt;Right, Depth + 1)); &#125;&#125; 将一个完全二叉树调整成堆 1234567891011121314151617181920212223242526272829303132//相关结构typedef struct HeapStruct *MinHeap;struct HeapStruct &#123; ElementType *Elements; int Size; int Capacity;&#125;void BuildHeap(MinHeap H) &#123; int i; for(i = H-&gt;Size/2; i &gt; 0; i--) &#123; // 从第一个有左子树的结点开始 PercDown(H, i); &#125;&#125;//向下过滤函数void PercDown(MinHeap H, int Pos) &#123; int Parent, Child; ElementType X; X = H-&gt;Elements[Pos]; for(Parent = Pos; Parent * 2 &lt;= H-&gt;Size; Parent = Child) &#123; Child = Parent * 2; if (Child != H-&gt;Size &amp;&amp; (H-&gt;Elements[Child] &gt; H-&gt;Elements[Child + 1])) Child++; if (X &lt;= H-&gt;Elements[Child]) break; else H-&gt;Elements[Parent] = H-&gt;Elements[Child]; &#125; H-&gt;Elements[Parent] = X;&#125;","tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://blog.zhaoziwen.com.cn/tags/数据结构/"}]},{"title":"Ubuntu环境挂载新硬盘","date":"2019-05-06T04:37:21.000Z","path":"2019/05/06/newdisk/","text":"1、显示硬盘及所属分区情况。1sudo fdisk -l newdisk_1 2、对硬盘进行分区。1sudo fdisk /dev/sdc 在Command (m for help) 提示符后面输入n，执行 add a new partition 指令给硬盘增加一个新分区 接着在选择 Partition type 时键入 e，指定分区为扩展分区（extended） 出现 Partition number(1-4)时，输入1表示只分一个区 后续按默认值继续 在重新出现 Command (m for help) 提示符后输入p，显示分区表 无误后键入w，保存分区表 重新进行步骤一，正确操作显示如下： newdisk_2 3、硬盘格式化1sudo mkfs -t ext4 /dev/sdc # -t ext4 表示将分区格式化成ext4文件系统类型 4、挂载硬盘分区显示硬盘挂载情况 1df -l 挂载 1sudo mount -t ext4 /dev/sdc /devdata 重新查看挂载情况，如图 newdisk_3 4、配置硬盘在系统启动自动挂载在文件/etc/fstab中加入如下配置 1/dev/sdc /devdata ext4 defaults 0 0","tags":[{"name":"ubuntu","slug":"ubuntu","permalink":"https://blog.zhaoziwen.com.cn/tags/ubuntu/"}]},{"title":"Permutations I & II","date":"2019-04-23T16:35:32.000Z","path":"2019/04/24/permutations/","text":"[LeetCode] 46. Permutations Given a collection of distince integers, return all possible permutations Example: Input: [1, 2, 3] Output: [ [1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1]] [LeetCode] 47. Permutations II Given a collection of numbers that might contain duplicates, return all possible unique permutations Example: Input: [1, 1, 2] Output: [ [1,1,2], [1,2,1], [2,1,1] ] 此题使用深度优先搜索DFS来求解，从左到右依次向out加入之前没有加入的元素，直到level等于num的数目大小，将out加入结果。其中，用visited数组来表示该元素是否被使用过。 12345678910111213141516171819202122class Solution &#123;public: vector&lt;vector&lt;int&gt;&gt; permute(vector&lt;int&gt;&amp; num) &#123; vector&lt;vector&lt;int&gt;&gt; res; vector&lt;int&gt; out, visited(num.size(), 0); # sort(nums.begin(), nums.end()); ## For II permuteDFS(num, 0, visited, out, res); return res; &#125; void permuteDFS(vector&lt;int&gt;&amp; num, int level, vector&lt;int&gt;&amp; visited, vector&lt;int&gt;&amp; out, vector&lt;vector&lt;int&gt;&gt;&amp; res) &#123; if (level == num.size()) &#123;res.push_back(out); return;&#125; for (int i = 0; i &lt; num.size(); ++i) &#123; if (visited[i] == 1) continue; # if(i &gt; 0 &amp;&amp; nums[i] == nums[i - 1] &amp;&amp; visited[i - 1] == 0) continue; ## For II visited[i] = 1; out.push_back(num[i]); permuteDFS(num, level + 1, visited, out, res); out.pop_back(); visited[i] = 0; &#125; &#125;&#125;; 其中第二行注释的代码表示如果这个元素跟前一个元素相等，并且前一个元素已经访问过了(visited = 0)，就跳过避免重复。","tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://blog.zhaoziwen.com.cn/tags/leetcode/"}]},{"title":"Sum of Two Integers","date":"2019-04-23T15:30:37.000Z","path":"2019/04/23/sum-of-two-integers/","text":"[LeetCode] 371. Sum of Two Integers Calculate the sum of two integers a and b, but you are not allowed to use the operator + and -. Example 1: Input: a = 1, b = 2 Output: 3 Example 2: Input: a = -2, b = 3 Output: 1 在十进制中，对于5+17=22这个结果，我们可以分为三步： 只做各位相加不进位，此时相加的结果是12 只做进位，5+7中有进位，进位是10 把前面两个结果加起来，结果正好等于22 在二进制中同理，5的二进制是101，17的二进制是10001 各位相加但不进位，得到的结果是10100 记下进位，此例中只有最后一位相加时产生一个进位，结果是二进制的10 把前两部的结果相加，结果是10110，正好是22 把二进制上的加法用位运算来替代 12345678int getSum(int a, int b) &#123; if(b == 0) &#123; return a; &#125; int num1 = a ^ b; int num2 = (a &amp; b)&amp;(0x7FFFFFFF) &lt;&lt; 1; return getSum(num1, num2);&#125; 注意：0x7FFFFFFF的作用是为了解决当a = -1, b = 1时，left shift操作错误(对于-2147483648)","tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://blog.zhaoziwen.com.cn/tags/leetcode/"}]},{"title":"Multiply Strings","date":"2019-04-22T15:32:59.000Z","path":"2019/04/22/multiply-strings/","text":"[LeetCode] 43. Multiply Strings Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string. Example 1: Input: num1 = “2”, num2 = “3” Output: “6” Example 2: Input: num1 = “123”, num2 = “456” Output: “56088” 这题看似简单，但是就是写不出来… 两数相乘的乘积的长度正好是两个数字的长度之和 1234567891011121314151617181920class Solution &#123;public: string multiply(string num1, string num2) &#123; string res = \"\"; int m = num1.size(), n = num2.size(); vector&lt;int&gt; vals(m+n); for(int i = m - 1; i &gt;= 0; --i) &#123; for(int j = n - 1; j &gt;= 0; --j) &#123; int mul = (num1[i] - '0') * (num2[j] - '0'); int p1 = i + j, p2 = i + j + 1, sum = mul + vals[p2]; vals[p1] += sum / 10; vals[p2] = sum % 10; &#125; &#125; for(int val : vals) &#123; if(!res.empty() || val != 0) res.push_back(val + '0'); &#125; return res.empty() ? \"0\" : res; &#125;&#125; 简单记录一下，这题其实就是检验写代码的能力，很可惜现在还不能把代码写的间接明了。","tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://blog.zhaoziwen.com.cn/tags/leetcode/"}]},{"title":"POSIX信号","date":"2019-04-18T16:17:25.000Z","path":"2019/04/19/posix-signal/","text":"在服务器子进程终止时，给父进程发送一个SIGCHLD信号。由于父进程未加处理，子进程进入僵死状态。 POSIX信号处理信号就是告知某个进程发生了某个事件的通知，有时也成为软件中断(interrupt) 信号可以： 由一个进程发送给另一个进程 由内核发送给某个进程 每一个信号都有一个与之关联的处置(disposition)，也称为行为(action)。我们通过调用sigaction函数来设定一个信号的处置，并有三种选择： 提供一个函数，在特定信号发生时就被调用。这样的函数被称为信号处理函数，这种行为称为捕获信号。但是有两个信号不同被捕获，即SIGKILL和SIGSTOP。 可以把某个信号的处置设定为SIG_IGN来忽略它。SIGKILL和SIGSTOP这两个信号不能被忽略。 把某个信号的处置设定为SIG_DFL来启用它的默认处置。 signal函数简历信号处置的POSIX方法就是调用sigaction函数，简单些的方法就是调用signal函数 1234567891011121314151617181920212223242526272829303132333435/* include signal */#include \"unp.h\"Sigfunc *signal(int signo, Sigfunc *func)&#123; struct sigaction act, oact; act.sa_handler = func; sigemptyset(&amp;act.sa_mask); act.sa_flags = 0; if (signo == SIGALRM) &#123;#ifdef SA_INTERRUPT act.sa_flags |= SA_INTERRUPT; /* SunOS 4.x */#endif &#125; else &#123;#ifdef SA_RESTART act.sa_flags |= SA_RESTART; /* SVR4, 44BSD */#endif &#125; if (sigaction(signo, &amp;act, &amp;oact) &lt; 0) return(SIG_ERR); return(oact.sa_handler);&#125;/* end signal */Sigfunc *Signal(int signo, Sigfunc *func) /* for our signal() function */&#123; Sigfunc *sigfunc; if ( (sigfunc = signal(signo, func)) == SIG_ERR) err_sys(\"signal error\"); return(sigfunc);&#125; 第4-5行：函数signal的正常函数原型因层次太多而变得很复杂 1void (*signal(int signo, void (*func)(int)))(int); 为了简化，在unp.h中定义了如下类型： 1typedef void Sigfunc(int); 说明信号处理函数是仅有一个整数参数且不返回值的函数。于是signal变为： 1Sigfunc *signal(int signo, Sigfunc *func); 第10行：POSIX允许我们指定一组信号，在信号处理函数被调用时阻塞。任何阻塞的信号都不同递交给进程。把sa_mask成员函数设置为空，以为着在该信号函数运行期间，不阻塞额外信号。POSIX保证被捕获的信号在其信号处理函数运行期间总是阻塞的 POSIX信号语义 一旦安装了信号处理函数，它便一直安装着 在一个信号处理函数运行期间，正被递交的信号是阻塞的。而且，安装处理函数在传递给sigaction函数的sa_mask信号集中指定的额外信号也被阻塞 如果一个信号在被阻塞期间产生了一次或多次，那些该信号被解阻塞之后通常只递交一次，也就是说Unix信号不排队 利用sigprocmask函数选择性的阻塞或解阻塞一组信号是可能的 处理SIGCHLD信号处理僵死进程在之前的代码中的listen调用之后增加如下函数调用： 1234567...... Listen(listenfd, LISTENQ); Signal(SIGCHLD, sig_chld); for ( ; ; ) &#123;...... 接着定义sig_chld这个信号处理函数 123456789101112#include \"unp.h\"voidsig_chld(int signo)&#123; pid_t pid; int stat; pid = wait(&amp;stat); printf(\"child %d terminated\\n\", pid); return;&#125; 处理被中断的系统调用当阻塞于某个慢系统调用的一个进程捕获某个信号且相应信号处理函数返回时，该系统调用可能返回一个EINTR错误。有些内核自动重启某些被中断的系统调用，为了移植方便，我们的捕获信号的程序需对返回的EINTR有所准备。 123456789for( ; ; ) &#123; clilen = sizeof(cliaddr); if((connfd = accept(listnfd, (SA *) &amp;cliaddr, &amp;clilen)) &lt; 0) &#123; if(errno == EINTR) continue; else err_sys(\"accept error\"); &#125;&#125; wait和waitpid函数123#include &lt;sys/wait.h&gt;pid_t wait(int *statloc);pid_t wait(pid_t pid, int *statloc, int options); 如果调用wait的进程没有已终止的子进程，不过有一个或多个子进程仍在执行，那么wait将阻塞到现有子进程第一个终止为止。 waitpid给了更多控制，pid参数允许我们指定想等待的进程ID，-1表示等待第一个终止的子进程。options参数的WNOHANG告知内核在没有已终止子进程时不要阻塞。 同时建立一个信号处理函数并在其中调用wait并不足以防止出现僵死进程：例如客户同时与服务器产生了5个连接，并在同一时刻退出，5个信号都在信号处理函数执行之前产生，而信号处理函数只执行一次，因为Unix信号一般不排队。并且，信号处理函数处理几次并不一定。 waitpid可以解决这个问题。可以防止wait在正运行的子进程尚有未终止时阻塞。 123456789101112#include \"unp.h\"voidsig_chld(int signo)&#123; pid_t pid; int stat; while ( (pid = waitpid(-1, &amp;stat, WNOHANG)) &gt; 0) printf(\"child %d terminated\\n\", pid); return;&#125; 即本节的目的： 当fork子进程时，必须捕获SIGCHLD信号 当捕获信号时，必须处理被中断的系统调用 SIGCHLD的信号处理函数必须正确编写，使用waitpid函数以免留下僵死进程 SIGPIPE信号当一个进程向某个已收到RST的套接字执行写操作时，内核向该进程发送一个SIGPIPE信号，该信号的默认行为是终止进程，因为进程必须捕获它以免不情愿被终止。 12345678910111213141516171819#include \"unp.h\"voidstr_cli(FILE *fp, int sockfd)&#123; char sendline[MAXLINE], recvline[MAXLINE]; while (Fgets(sendline, MAXLINE, fp) != NULL) &#123; Writen(sockfd, sendline, 1); sleep(1); Writen(sockfd, sendline+1, strlen(sendline)-1); if (Readline(sockfd, recvline, MAXLINE) == 0) err_quit(\"str_cli: server terminated prematurely\"); Fputs(recvline, stdout); &#125;&#125; 第一次把文本行数据的第一个字节写入套接字，暂停1s后，第二次把同一文本行中剩余字节写入套接字，目的是让第一次writen引发一个RST，第二个writen产生SIGPIPE","tags":[{"name":"计算机网络","slug":"计算机网络","permalink":"https://blog.zhaoziwen.com.cn/tags/计算机网络/"},{"name":"UNIX网络编程","slug":"UNIX网络编程","permalink":"https://blog.zhaoziwen.com.cn/tags/UNIX网络编程/"}]},{"title":"Lowest Common Ancestor of a Binary Tree","date":"2019-04-15T16:27:43.000Z","path":"2019/04/16/lowest-common-ancestor-of-a-binary-tree/","text":"这里有两个题类似，一个是在二叉查找树的条件下，另一个是在普通二叉树条件下 [LeetCode] 235. Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST. According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).” Given binary search tree: root = [6,2,8,0,4,7,9,null,null,3,5] [LeetCode] 236. Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree. According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).” Given the following binary tree: root = [3,5,1,6,2,0,8,null,null,7,4] binarytree 其实236这个题在之前自己已经解决过了，但是反而到了235题没有成功解出来，可能的原因是题意理解错了，以为是找他们值最小的那个父节点。 之前236题自己的解法： 123456789101112131415161718192021222324class Solution &#123;public: TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) &#123; if(root-&gt;val == p-&gt;val || root-&gt;val == q-&gt;val) return root; bool p_dir = exist_subtree(root-&gt;left, p); bool q_dir = exist_subtree(root-&gt;left, q); if(p_dir &amp;&amp; q_dir) &#123; return lowestCommonAncestor(root-&gt;left, p, q); &#125; if(!p_dir &amp;&amp; !q_dir) &#123; return lowestCommonAncestor(root-&gt;right, p, q); &#125; else &#123; return root; &#125; &#125; bool exist_subtree(TreeNode* root, TreeNode* a) &#123; if(root == NULL) return false; if(root-&gt;val == a-&gt;val) return true; if(exist_subtree(root-&gt;left,a)) return true; if(exist_subtree(root-&gt;right,a)) return true; return false; &#125;&#125;; 现在比较好的通用解法： 12345678910class Solution &#123;public: TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) &#123; if(!root || p == root || q == root) return root; TreeNode *left = lowestCommonAncestor(root-&gt;left, p, q); TreeNode *right = lowestCommonAncestor(root-&gt;right, p, q); if(left &amp;&amp; right) return root; return left ? left : right; &#125;&#125;; 注意第4行的返回情况，简洁的边界处理、多种情况的巧妙融合是需要自己接下来继续努力的地方。","tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://blog.zhaoziwen.com.cn/tags/leetcode/"}]},{"title":"基本TCP套接字编程","date":"2019-04-13T11:51:39.000Z","path":"2019/04/13/basic-tcp-socket-code/","text":"基础源码(请求日期和时间)客户端12345678910111213141516171819202122232425262728293031323334#include \"unp.h\"intmain(int argc, char **argv)&#123; int sockfd, n; char recvline[MAXLINE + 1]; struct sockaddr_in servaddr; if (argc != 2) err_quit(\"usage: a.out &lt;IPaddress&gt;\"); if ( (sockfd = socket(AF_INET, SOCK_STREAM, 0)) &lt; 0) err_sys(\"socket error\"); bzero(&amp;servaddr, sizeof(servaddr)); servaddr.sin_family = AF_INET; servaddr.sin_port = htons(13); /* daytime server */ if (inet_pton(AF_INET, argv[1], &amp;servaddr.sin_addr) &lt;= 0) err_quit(\"inet_pton error for %s\", argv[1]); if (connect(sockfd, (SA *) &amp;servaddr, sizeof(servaddr)) &lt; 0) err_sys(\"connect error\"); while ( (n = read(sockfd, recvline, MAXLINE)) &gt; 0) &#123; recvline[n] = 0; /* null terminate */ if (fputs(recvline, stdout) == EOF) err_sys(\"fputs error\"); &#125; if (n &lt; 0) err_sys(\"read error\"); exit(0);&#125; 服务端1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768#include \"unp.h\"#include &lt;time.h&gt;#include &lt;unistd.h&gt;intmain(int argc, char **argv)&#123; int listenfd, connfd; socklen_t len; struct sockaddr_in servaddr, cliaddr; char buff[MAXLINE]; time_t ticks; listenfd = Socket(AF_INET, SOCK_STREAM, 0); bzero(&amp;servaddr, sizeof(servaddr)); servaddr.sin_family = AF_INET; servaddr.sin_addr.s_addr = htonl(INADDR_ANY); servaddr.sin_port = htons(13); /* daytime server */ Bind(listenfd, (SA *) &amp;servaddr, sizeof(servaddr)); Listen(listenfd, LISTENQ); // 阻塞服务器 // for ( ; ; ) &#123; // len = sizeof(cliaddr); // connfd = Accept(listenfd, (SA *) &amp;cliaddr, &amp;len); // sleep(5); // printf(\"connection from %s, port %d\\n\", // Inet_ntop(AF_INET, &amp;cliaddr.sin_addr, buff, sizeof(buff)), // ntohs(cliaddr.sin_port)); // ticks = time(NULL); // snprintf(buff, sizeof(buff), \"%.24s\\r\\n\", ctime(&amp;ticks)); // Write(connfd, buff, strlen(buff)); // Close(connfd); // &#125; // 并发服务器 pid_t pid; for(;;) &#123; len = sizeof(cliaddr); connfd = Accept(listenfd, (SA *) &amp;cliaddr, &amp;len); if((pid = Fork()) == 0) &#123; Close(listenfd); sleep(5); printf(\"connection from %s, port %d\\n\", Inet_ntop(AF_INET, &amp;cliaddr.sin_addr, buff, sizeof(buff)), ntohs(cliaddr.sin_port)); ticks = time(NULL); snprintf(buff, sizeof(buff), \"%.24s\\r\\n\", ctime(&amp;ticks)); Write(connfd, buff, strlen(buff)); Close(connfd); exit(0); &#125; Close(connfd); &#125;&#125; 部分函数解释socket函数执行网络I/O的进程必须做的第一件事情 12#include &lt;sys/socket.h&gt;int socket(int family, int type, int protocol); family常值： ​ IPv4协议：AF_INET ​ IPv6协议：AF_INET6 type常值： ​ 字节流套接字：SOCK_STREAM ​ 数据报套接字：SOCK_DGRAM protocol常值： ​ TCP传输协议：IPPROTO_CP ​ UDP传输协议：IPPROTO_UDP 返回值： ​ 成功时返回一个小的非负整数值，称为套接字描述符，简称sockfd connect函数TCP客户用connect函数来建立与TCP服务器的连接 12#include &lt;sys/socket.h&gt;int connect(int sockfd, const struct sockaddr *servaddr, socklen_t addrlen); 出错返回情况： 1、一定时间内没有收到SYN分节的响应，返回ETIMEDOUT错误 2、若对SYN的响应是RST，表明该服务器主机在指定端口上没有进程在等待与之连接。返回ECONNREFUSED错误 3、客户发出的SYN在中间的某个路由器上引发了一个”destination unreachable”ICMP错误。若在一段时间内仍未收到响应，则返回EHOSTUNREACH或ENETUNREACH错误 bind函数把一个本地协议地址赋予一个套接字 12#include &lt;sys/socket.h&gt;int bind(int sockfd, const struct sockaddr *myaddr, socken_t addrlen); 对于IPv4，同配地址由常值INADDR_ANY来指定，其值一般为0 对于IPv6，因为128位的IPv6地址是存放在一个结构中的。(在C语言中，赋值语句的右边无法表示常值结构)，则可以改写为 12struct sockaddr_in6 serv;serv.sin6_addr = in6addr_any; 系统预先分配in6addr_any变量并将其初始化为常值IN6ADDR_ANY_INIT。头文件&lt;netinet/in.h&gt;中含有in6addr_any的extern声明(0的网络字节序和主机字节序一样，所以没用htonl) listen函数listen函数仅由TCP服务器调用 12#include &lt;sys/socket.h&gt;int listen(int sockfd, int backlog); 第二个参数规定了内核应该为相应套接字排队的最大连接个数 该函数在socket和bind之后调用，在accept之前调用 accept函数accept函数由TCP服务器调用，用于从已完成连接队列头返回下一个已完成连接。如果为空，则投入睡眠 12#include &lt;sys/socket.h&gt;int accept(int sockfd, struct sockaddr *cliaddr, socklen_t *addrlen); 它的第一个参数为监听套接字描述符，返回值为已连接套接字描述符 fork和exec函数12#include &lt;unistd.h&gt;pid_t fork(void); fork函数调用一次，返回两次。在调用进程(父进程)返回一次，返回值为新派生的进程(子进程)的进程ID号。在子进程又返回一次，返回值为0 并发服务器典型的并发服务器程序轮廓： 123456789101112131415pid_t pid;int listenfd, connfd;listenfd = Socket(...);Bind(listenfd, ...);Listen(listenfd, LISTENQ);for( ; ; ) &#123; connfd = Accept(listenfd, ...); if((pid = Fork()) == 0) &#123; Close(listenfd); doit(connfd); Close(connfd); exit(0); &#125; Close(connfd);&#125; close函数12#include &lt;unistd.h&gt;int close(int sockfd); getsockname和getpeername函数返回与某个套接字关联的本地协议地址(getsockname)或者返回与某个套接字关联的外地协议地址(getpeername) 123#include &lt;sys/socket.h&gt;int getsockname(int sockfd, struct sockaddr *localaddr, socklen_t *addrlen);int getpeername(int sockfd, struct sockaddr *peeraddr, socklen_t *addrlen); 例子：获取套接字的地址族 123456789#include \"unp.h\"int sockfd_to_family(int sockfd) &#123; struct sockaddr_storage ss; socken_t len; len = sizeof(ss); if(getsockname(sockfd, (SA *) &amp;ss, &amp;len) &lt; 0) return(-1); return(ss.ss_family);&#125;","tags":[{"name":"tcp","slug":"tcp","permalink":"https://blog.zhaoziwen.com.cn/tags/tcp/"},{"name":"计算机网络","slug":"计算机网络","permalink":"https://blog.zhaoziwen.com.cn/tags/计算机网络/"},{"name":"UNIX网络编程","slug":"UNIX网络编程","permalink":"https://blog.zhaoziwen.com.cn/tags/UNIX网络编程/"}]},{"title":"Partition Equal Subset Sum","date":"2019-04-03T17:05:06.000Z","path":"2019/04/04/partition-equal-subset-sum/","text":"[LeetCode] 416. Given a non-empty array containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal. Note: Each of the array element will not exceed 100. The array size will not exceed 200. Example1: Input: [1, 5, 11, 5] Output: true Explanation: The array can be partitioned as [1, 5, 5] and [11]. 万事不决用DP！ 首先原数组所有数字和一定是偶数，不然无法拆分成2个和相同的子集和。所以我们只需要算出原数组的和，然后除以2，就是我们的target，即将问题转化为能不能找到一个非空子集，使得其和为target。 此处我们定义一个一维dp数组，其中dp[i]表示原数组是否可以取出若干个数字，其和为i。初始状态dp[0]为true，因为题中限制了所有数字为正数。 我们需要遍历原数组中的数字，对于遍历到的每个数字nums[i]，需要更新dp数组，我们的最终目标是想知道dp[target]的bool值，就要想办法用数组中的数字去凑出target，因为都是正数，结果会越来越大，那么加上nums[i]就有可能会组成区间[nums[i], target]中的某个值，那么对于这个区间中的任意一个数字j，如果dp[j - nums[i]]为true，说明现在已经可以组成j-nums[i]这个值，再加上nums[i]，就可以组成数字j，那么dp[j]就一定为true。所以状态转移方程为：$$dp[j]\\ =\\ dp[j]\\ ||\\ dp[j\\ -\\ nums[i]]\\ \\ \\ \\ (nums[i]\\ &lt;=\\ j\\ &lt;=\\ target)$$需要特别注意的是：第二个for循环一定要从target遍历到nums[i]，不能反过来，因为如果从nums[i]到target，假如nums[i] = 1，那[1, target]所有dp的值都为true，因为dp[0] = true，dp[1] = dp[1] || dp[0] 也为true… 同时也是为了防止同一元素被多次利用。 123456789101112131415class Solution &#123;public: bool canPartition(vector&lt;int&gt;&amp; nums) &#123; int sum = accumulate(nums.begin(), nums.end(), 0), target = sum &gt;&gt; 1; if(sum &amp; 1) return false; vector&lt;bool&gt; dp(target + 1, false); dp[0] = true; for(int num: nums) &#123; for(int i = target; i &gt;= num; --i) &#123; dp[i] = dp[i] || dp[i - num]; &#125; &#125; return dp[target]; &#125;&#125;","tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://blog.zhaoziwen.com.cn/tags/leetcode/"}]},{"title":"Burst Balloons","date":"2019-04-02T15:48:10.000Z","path":"2019/04/02/burst-balloons/","text":"[LeetCode] 312. Burst Balloons Given n ballons, indexed from 0 to n-1. Each ballon is painted with a number on it represented by array nums. You are asked to burst all the balloons. If the you burst ballon i you will get nums[left] * nums[i] * nums[right] coins. Here left and right are adjacent indices of i. After the burst, the left and right then becomes adjacent. Find the maximum coins you can collect by bursting the balloons wisely. Note: You may imagine nums[-1] = nums[n] = 1 0 ≤ n ≤ 500, 0 ≤ nums[i] ≤ 100 Example: Input: [3, 1, 5, 8] Ouput: 167 Explanation: nums = [3, 1, 5, 8] –&gt; [3, 5, 8] –&gt; [3, 8] –&gt; [] coins = 3 * 1 * 5 + 3 * 5 * 8 + 1 * 3 * 8 + 1 * 8 * 1 = 167 这道题的解题思路仍是动态规划，与经典的矩阵连乘相似。 维护一个二维动态数组dp，其中dp[i][j]表示打爆区间[i,j]中的所有气球能得到的最多金币。在这个区间中，遍历其中的K，加入第K个气球先被打爆，然后区间[i,j]被分成了两部分，[i,k-1]和[k+1,j]。所以递推公式如下：$$dp[i][j] = max(dp[i][j], nums[i - 1] * nums[k] * nums[j + 1] + dp[i][k - 1] + dp[k + 1][j]) ( i ≤ k ≤ j )$$其中，遍历的顺序为： [3] -&gt; [1] -&gt; [5] -&gt; [8] -&gt; [3, 1] -&gt; [1, 5] -&gt; [5, 8] -&gt; [3, 1, 5] -&gt; [1, 5, 8] -&gt; [3, 1, 5, 8] 123456789101112131415161718class Solution &#123;public: int maxCoins(vector&lt;int&gt;&amp; nums) &#123; int n = nums.size(); nums.insert(nums.begin(), 1); nums.push_back(1); vector&lt;vector&lt;int&gt;&gt; dp(n + 2, vector&lt;int&gt;(n + 2, 0)); for (int len = 1; len &lt;= n; ++len) &#123; for (int i = 1; i &lt;= n - len + 1; ++i) &#123; int j = i + len - 1; for (int k = i; k &lt;= j; ++k) &#123; dp[i][j] = max(dp[i][j], nums[i - 1] * nums[k] * nums[j + 1] + dp[i][k - 1] + dp[k + 1][j]); &#125; &#125; &#125; return dp[1][n]; &#125;&#125;;","tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://blog.zhaoziwen.com.cn/tags/leetcode/"}]},{"title":"传输控制协议TCP概述","date":"2019-04-01T17:08:31.000Z","path":"2019/04/02/tcp/","text":"TCP主要特点 TCP是面向连接的运输层协议。意味着在使用TCP之前，必须要先建立TCP连接；在完成数据传送后，释放已经建立的TCP连接。 每一条TCP连接只能有两个端点(endpoint)，即TCP连接是点对点的。 TCP提供可靠交付的服务。 TCP提供全双工通信。 面向字节流。TCP并不关心应用程序一次把多长的报文发送到TCP的缓存中，而是根据对方给出的窗口值和当前网络拥塞的程度来决定应该包含多少个字节（与UDP不同，由应用程序给出） tcp_1 TCP的连接TCP连接的端点叫做套接字(socket)，即由端口号拼接到IP地址后面构成，例如：192.3.4.5:80，每一条TCP连接唯一地被通信两端的两个端点(即两个套接字)所确定 可靠传输的工作原理停止等待协议“停止等待”就是每发送完一个分组就停止发送，等待对方的确认，在收到确认之后再发送下一个分组。 无差错情况(a) 出现差错(b) A在发送完一个分组后，暂时保留已发送的分组的副本，收到相应确认后消除副本。 分组和确认分组必须进行编号。 超时计时器设置的重传时间应当比数据在分组传输的平均时间更长一些。 确认丢失和确认迟到 确认丢失 丢弃这个重复的分组，不向上交付。 向A发送确认 确认迟到 A收到重复确认后丢弃。 B收到重复的分组后按确认丢失处理。 上述这种可靠的传输协议常称为自动重传请求ARQ(Automatic Repeat reQuest) 信道利用率 $$U=\\frac{T_{D}}{T_{D} + RTT + T_{A}$$ 为了提高传输效率，发送方可以不使用低效率的停止等待协议，而是采用流水线传输，该方式会使用连续ARQ协议和滑动窗口协议。 连续ARQ协议 tcp_6 发送方每收到一个确认，就把发送窗口向前滑动一个分组。接收方一般是采用累计确认的方式，即接收方不必对收到的分组逐个发送确认，而是在收到几个分组之后，对按序到达的最后一个分组发送确认。 TCP报文段的首部格式TCP报文段首部的前20个字节是固定的(如下图)，后面有4n字节是根据需要而增加的选项。因此TCP首部的最小长度是20字节。 tcp_7 各字段意义如下： 源端口和目的端口。 序号。范围是$[0, 2^{32} - 1]$，在一个TCP连接中传送的字节流中的每一个字节都按序编号。首部中的序号字段值指的是本报文段所发送的数据的第一个字节的序号。 确认号。是期望收到对方下一个报文段的第一个数据字节的序号。若确认号 = N，则表明：到序号N - 1为止的所有数据都已正确收到。 数据偏移。指的是TCP报文段的数据起始处距离TCP报文段的起始处有多远。实际上是指TCP报文段的首部长度。”数据偏移”的单位是32位字(即4字节)。由于4位二进制数能表示的最大十进制数字是15，因此数据偏移最大值是50字节。也是TCP首部的最大长度。 保留。保留为今后使用，目前应置为0。后跟6个控制位。 紧急URG(URGent)。当URG=1时，表明紧急指针字段有效。系统应尽快传送此报文段。 确认ACK(ACKnowledgment)。当ACK=1时，表名确认号字段有效。TCP规定，在连接建立后所有传送的报文段都必须把ACK置为1。 推送PSH(PuSH)。发送方TCP把PSH置1时，接收方TCP收到PSH=1的报文段，就尽快地交付接受应用进程，而不再等到整个缓存都填满了后再向上交付。 复位RST(ReSeT)。当RST=1时，表示TCP连接中出现严重错误，必须释放连接，然后再重新建立运输连接。RST置1还用来拒绝一个非法的报文段或者拒绝打开一个连接。 同步SYN(SYNchronization)。在连接建立是用来同步序号。当SYN=1而ACK=0时，表明这是一个连接请求报文段。对方若同意建立连接，则应在响应的报文段中使SYN=1和ACK=1。因此，SYN置为1就表示这是一个连接请求或连接接受报文。 终止FIN(FINis)。用来释放一个连接，置为1是生效，请求释放运输连接。 窗口。窗口指的是发送本报文段的一方的接受窗口。窗口值告诉对方：从本报文段首部的确认号算起，接收方目前允许对方发送的数据量(字节为单位)。 检验和。范围包括首部和数据两部分。和UDP一样在计算检验和时，要在TCP报文段的前面加上12字节的伪首部。格式与UDP一样，应把第4个字段改为6，第5个字段中的UDP长度改为TCP长度。 紧急指针。仅在URG=1时才有意义，指出本报文段中的紧急数据的字节数，即紧急指针指出了紧急数据的末尾在报文段中的位置。 选项。最长40字节。没有使用是，TCP的首部长度为20字节。 最初TCP只规定一种选项，即最大报文段长度MSS（Maximum Segment Size），即数据字段的最大长度。 随后增加了窗口扩大、时间戳、选择确认（ASCK）等选项 TCP可靠传输的实现以字节为单位的滑动窗口TCP的滑动窗口以字节为单位，下面讨论A向B发送数据。 tcp_8 发送窗口的后沿的变化有两种，即不动(没有收到新的确认)和前移(收到了新的确认)。前沿也有两种，不断前移和不动(没有收到新的确认或者收到新的确认同时接收方窗口变小)。 超时重传时间的选择TCP采用了一种自适应算法，每测量到一个新的RTT样本，就按下式重新计算一次$RTT_{S}$(加权平均往返时间)：$$新的RTT_{S} = (1 - α) * (旧的RTT_{S}) + α * (新的RTT样本)$$建议标准值为1/8即0.125。 所以，超时计时器设置的超时重传时间RTO(RetransmissionTime-Out)应略大于上面得出的加权平均往返时间$RTT_{S}$。建议计算式如下：$$RTO = RTT_{S} + 4 * RTT_{D}$$而$RDD_{D}$是RTT的偏差的加权平均值，与$RTT_{S}$和新的RTT样本之差有关。建议计算式如下： 第一次测量时，$RTT_{D}$值取为测量到的RTT样本值的一半，在以后的测量中：$$新的RTT_{D}=(1-β) * (旧的RTT_{D})+β * | RTT_{S}-新的RTT样本|$$这里β的推荐值是1/4，即0.25。 为了解决无法确实确认报文段是对先发送的报文段的确认还是对后来重传的报文段的确认，在计算加权平均RTTS时，只要报文段重传了，就不采用其往返时间样本，同时进一步的修正：报文段每重传一次，就把超时重传时间RTO增加到原来的2倍，当不在发生重传时，才根据上式进行计算。 选择确认SACK tcp_9 和前后不连续的每一个字节块都有两个边界：左边界和右边界。左边界指出字节块的第一个字节的序号，但右边界减1才是字节块中的最后一个序号(与确认号类似)。 如果使用选择确认SACK，需要在建立连接时在TCP首部的选项中加入”允许SACK”的选项。由于首部选项最多只能40字节，而指明一个边界需要4字节，因此在选项中最多只能指明4个字节块的边界信息。其中还需要两个字节，一个用来指明是SACK选项，另一个指明这个选项占多少字节。 TCP的流量控制利用滑动窗口实现流量控制 tcp_10 TCP为每一个连接设有一个持续计时器(persistence timer)。只要TCP连接的一方收到对方的零窗口通知，就启动持续计时器。若持续计时器设置的时间到期，就发送一个零窗口探测报文段，而对方就在确认这个探测报文段时给出现在的窗口值。如果仍为0，就重新设置持续计时器。 TCP的传输效率不同的机制来控制TCP报文段的发送时机： TCP维持一个变量，等于最大报文段长度MSS。 由发送发的应用进程指明要求发送报文段，即TCP支持的推送（push）操作。 发送方的一个计时期限到了，就把当前已有的缓存数据装入报文段（不超过MSS）发出去。 Nagle算法：若发送应用程序吧要发送的数据逐个字节送到TCP发送缓存，则发送方就把第一个数据字节先发送出去，把后面到达的数据字节都缓存起来。当发送方收到第一个数据字节的确认后，再把发送缓存中的所有数据组装成一个报文段发送出去。同时，当到达的数据已达到发送窗口大小的一半或者已达到报文段的最大长度时，就立即发送一个报文段。 解决糊涂窗口综合征(接受缓存已满，应用程序每次只读取1个字节)，可以让接收方等待一段时间，使得接受缓存已有足够空间容纳一个最长的报文段，或者等到接受缓存已有一半空闲的空间。只要出现任何一种情况，接收方就发出确认报文，并向发送方通知当前的窗口大小。 TCP的拥塞控制拥塞控制的一般原理拥塞控制指的是防止过多的数据注入网络，使网络中的路由器或链路不致过载。 流量控制往往是指点对点通信量的控制，是个端到端的问题。抑制发送端的速率，以便接收端来得及接收。 tcp_11 TCP的拥塞控制方法TCP进行拥塞控制的算法有四种，即慢开始(slow-start)、拥塞避免(congestion avoidance)、快重传(fast retransmit)、快恢复(fast recovery) 发送方维持一个叫做拥塞窗口cwnd(congestion window)的状态变量，取决于网络的拥塞程度，并动态变化。发送方的发送窗口等于拥塞窗口。 原则：只要网络没有出现拥塞， 拥塞窗口就可以再增大一些。但只要出现拥塞或有可能出现拥塞，就必须把拥塞窗口减小一些。判断网络拥塞的依据就是出现了超时。 慢开始算法： 初始拥塞窗口cwnd设置为不超过2至4个SMSS的数值。具体规定省略。 在每收到一个对新的报文段的确认之后，可以把拥塞窗口增加最多一个SMSS的数值。每经过一个传输轮次(transmission round)，拥塞窗口cwnd就加倍 tcp_12 为了防止拥塞窗口cwnd增长过大引起网络拥塞，还需要设置一个慢开始门限ssthresh状态变量： 当cwnd &lt; ssthresh时，使用慢开始算法 当cwnd &gt; ssthresh时，使用拥塞避免算法 当cwnd = ssthresh时，两种都可以 拥塞避免： 没经过一个往返RTT就把发送方的拥塞窗口cwnd加1，而不是成倍增长。 当出现超时时，调整ssthresh = cwnd / 2，并同时设置拥塞窗口cwnd = 1，进入慢开始阶段 当出现收到3个重复确认，应立即进行重传，并执行快恢复算法，即调整ssthresh = cwnd / 2，同时设置cwnd = ssthresh，并开始执行拥塞避免算法。 tcp_13 tcp_14 主动队列管理AQM为了避免发生网络中的全局同步现象，AQM指在队列长度达到某个值得警惕的数值时就主动丢弃分组。随机早期检测RED(Random Early Detection)维持两个参数，即最小门限和最大门限： 若平均队列长度小于最小门限，新到达的分组放入队列进行排队。 若超过最大门限，则把新到达的分组丢弃。 若在之间，则按概率p丢弃。 TCP的运输连接管理运输连接有三个阶段：连接建立、数据传送、连接释放 TCP的连接建立握手需要在客户和服务器之间交换三个TCP报文段。 tcp_15 最初两端的TCP进程都处于CLOSED状态。A(客户)主动打开连接，B(服务器)被动打开连接。 一开始，B的TCP服务器进程创建传输控制块TCB，准备接受客户进程的连接请求。然后服务器进程处于LISTEN状态，等待客户的连接请求。 A的TCP客户端创建TCB，然后在打算建立TCP连接时，向B发出连接请求报文段，这是首部中的SYN=1，同时选择一个初始序号seq = x。SYN报文段(SYN=1的报文段)不能携带数据，但要消耗一个序号。这是TCP客户进程进入SYN-SENT状态。 B收到连接请求后，如同意建立连接，则向A发送确认。在确认报文段中应把SYN位和ACK位都置为1，确认号是ack = x + 1，同时也为自己选择一个初始序号seq = y。这个报文段也不能携带数据，但同样消耗一个序号。这是TCP服务器进程进入SYN-RCVD状态。 TCP客户进程收到B的确认之后，还要向B给出确认。确认报文段ACK=1，确认号ack = y + 1，而自己的序号seq = x + 1。ACK报文段可以携带数据。但如果不携带数据则不消耗序号，在这种情况下，下一个数据报文段的序号仍是seq = x + 1。这时TCP连接已经建立，A进入ESTABLISHED状态。 当B收到A的确认后，也进入ESTABLISHED状态。 A最后发送一次确认的意义：为了防止已失效的连接请求报文段突然传送到B，因而产生错误。 TCP的连接释放 tcp_16 A和B都处于ESTABLISHED状态。 A的应用进程先向其TCP发出连接释放报文段，并停止再发送数据，主动关闭TCP连接。A把连接释放报文段的首部的终止控制位FIN置1，其序号seq = u，它等于前面已传送过的数据的最后一个字节加1。这时A进入FIN-WAIT-1状态，等待B的确认。FIN报文段即使不携带数据，也消耗一个序号。 B收到连接释放报文段后即发出确认，确认号是ack = u + 1，而这个报文段自己的序号是v，等于B前面已传送过的数据的最后一个字节的序号加1。然后B进入CLOSE-WAIT状态。这是的TCP连接处于半关闭(half-close)状态，A已经没有数据发送了，但B若要发送数据，A仍要接受。即B到A这个方向的连接并未关闭。 A收到来自B的确认后，就进入FIN-WAIT-2状态，等待B发出的连接释放报文段。 若B已经没有要向A发送的数据，其应用程序就通知TCP释放连接。这时B发出的连接释放报文段必须使用FIN=1。现假定B的序号为w。B还必须重复上一次已发送过的确认号ack = u + 1。这时B就进入LAST-ACK状态，等待A的确认。 A收到B的连接释放报文段后，发出确认。在确认报文段中把ACK置为1，确认号ack = w + 1，而自己的序号seq = u + 1。然后进入TIME-WAIT状态。目前TCP连接仍未释放，必须经过时间等待计时器(TIME-WAIT timer)设置的时间2MSL后，A才进入到CLOSE状态。MSL叫做最长报文段寿命(Maximum Segment Lifetime)。 A在TIME-WAIT状态下等待2MSL的时间的意义： 为了保证A发送的最后一个ACK报文段能够到达B。B在LAST-ACK状态收不到对已发送的FIN + ACK报文段的确认，便会超时重传。接着A再重传，重新启动2MSL计时器。 为了防止”已失效的连接请求报文”出现。A在发送完最后一个ACK报文段后，再经过2MSL，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失，使下一个新的连接中不会出现这种旧的连接请求报文段。 除了等待计时器，TCP还有一个保活计时器(keepalive timer)。服务器每收到一次客户的数据，就重新设置该计时器。若10个探测报文段后仍无相应，就关闭连接。 TCP的有限状态机粗实线表示对客户进程的正常变迁。粗虚线箭头表示对服务器进程的正常变迁。另一种细线箭头表示异常变迁。 tcp_17","tags":[{"name":"计算机网络","slug":"计算机网络","permalink":"https://blog.zhaoziwen.com.cn/tags/计算机网络/"},{"name":"TCP","slug":"TCP","permalink":"https://blog.zhaoziwen.com.cn/tags/TCP/"}]},{"title":"Best Time to Buy and Sell Stock with Cooldown","date":"2019-04-01T14:57:33.000Z","path":"2019/04/01/best-time-to-buy-and-sell-stock-with-cooldown/","text":"[LeetCode] 309. Say you have an array for which the $i^{th}$element is the price of a given stock on day $i$. Design an algorithm to find the maximum profit. You may complete as many transactions as you like(ie, buy one and sell one share of the stock multiple times) with the following restrictions: You may not engage in multiple transactions at the same time(ie, you must sell the stock before you buy again). After you sell your stock, you cannot buy stock on next day. (ie, cool down 1 day) Example: Input: [1,2,3,0,2] Output: 3 Explanation: transactions = [buy, sell, cooldown, buy, sell] 这里的动态规划问题跟之前的稍有不同。 当前买卖股票的行为会受到之前日期买卖股票行为的影响。对一天的状态有：买入bug，卖出sell，冷却cooldown。 但是对于这一天是否持股只有两种状态：持股状态buy，没有持股状态sell, cooldown。 对于当天持股状态时，至当天为止的最大利润有两种可能： 今天没有买入，跟昨天持股状态一样 今天买入，昨天是冷却期，利润是前天卖出股票时得到的利润减去今天股票的价钱。 二者取最大值。 对于当天未持股状态，至当天为止的最大利润也有两种情况： 今天没有卖出，跟昨天未持股状态一样 昨天持有股票，今天卖出了，例如是昨天持有股票时候的利润加上今天股票的价钱 二者取最大值 直至最后一天的状态应该是卖出状态。最终利润是sell[n-1]。 状态转移方程：$$sell[i] = max(sell[i-1], buy[i-1]+price[i]);$$$$buy[i] = max(buy[i-1], sell[i-1]-price[i]);$$ 1234567891011121314class Solution &#123;public: int maxProfit(vector&lt;int&gt;&amp; prices) &#123; if(prices.size() == 0) return 0; int pre_bug = 0, pre_sell = 0, buy = -prices[0], sell = 0; for(auto price:prices) &#123; pre_buy = buy; buy = max(pre_buy, pre_sell-price); // 此处的buy已经指到下一个，pre_buy更新为之前的buy，现在的buy的前一个，但是pre_sell没有更新，为现在的buy的前一个的前一个 pre_sell = sell; sell = max(pre_sell, pre_buy+price); &#125; return sell; &#125;&#125;","tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://blog.zhaoziwen.com.cn/tags/leetcode/"}]},{"title":"字典树(前缀树) Trie Tree(Prefix Tree)","date":"2019-03-27T16:27:52.000Z","path":"2019/03/28/trie-tree/","text":"字典树是一种数据结构，用于处理大量的字符串，是一种哈希树的变种。典型应用是用于统计、排序和保存大量的字符串，经常被搜索引擎系统用于文本词频统计。优点在于利用字符串的公共前缀来减少查询时间，最大限度地减少无谓的字符串比较，查询效率比哈希表高。 字典树有3个基本性质： 根结点不包含字符，除根节点外每一个节点都只包含一个字符。 从根结点到某一节点，路径上经过的字符连接起来，为该节点对应的字符串。 每个节点的所有子节点包含的字符都不相同。 实现如下：首先定义TrieNode 12345678910111213141516171819202122232425262728293031class TrieNode &#123; char content; // the character in the node boolean isEnd; // whether the end of the words int count; //the number of words sharing this character LinkedList&lt;TrieNode&gt; childList; // the child list public TrieNode(char c) &#123; childList = new LinkedList&lt;TrieNode&gt;(); isEnd = false; content = c; count = 0; &#125; public TrieNode subNode(char c) &#123; if(childList != null) &#123; for(TrieNode eachChild : childList) &#123; if(eachChild.content == c) &#123; return eachChild; &#125; &#125; &#125; return null; &#125; public TrieNode() &#123; childList = new LinkedList&lt;TrieNode&gt;(); isEnd = false; content = ' '; count = 0; &#125;&#125; 然后是Trie类的具体实现 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465public class Trie &#123; private TrieNode root; public Trie() &#123; root = new TrieNode(); &#125; public void insert(String word) &#123; if(search(word) == true) return; TrieNode current = root; for(int i = 0; i &lt; word.length(); i++) &#123; TrieNode child = current.subNode(word.charAt(i)); if(child != null) &#123; current = child; &#125; else &#123; current.childList.add(new TrieNode(word.charAt(i))); current = current.subNode(word.charAt(i)); &#125; current.count++; &#125; current.isEnd = true; &#125; public boolean search(String word) &#123; TrieNode current = root; for(int i = 0; i &lt; word.length(); i++) &#123; if(current.subNode(word.charAt(i)) == null) return false; else current = current.subNode(word.charAt(i)); &#125; if(current.isEnd == true) return true; return false; &#125; public boolean startWith(String word) &#123; TrieNode current = root; for(int i = 0; i &lt; word.length(); i++) &#123; if(current.subNode(word.charAt(i)) == null) return false; else current = current.subNode(word.charAt(i)); &#125; return true; &#125; public void deleteWord(String word) &#123; if(search(word) == false) return; TrieNode current = root; for(char c : word.toCharArray()) &#123; TrieNode child = current.subNode(c); if(child.count == 1) &#123; current.childList.remove(child); return; &#125; else &#123; child.count--; current = child; &#125; &#125; current.isEnd = false; &#125;&#125;","tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://blog.zhaoziwen.com.cn/tags/数据结构/"}]},{"title":"Maximal Square","date":"2019-03-26T17:07:04.000Z","path":"2019/03/27/maximal-square/","text":"[LeetCode] 221. Given a 2D binary matrix filled with 0’s and 1’s, find the largest square containing only 1’s and return its area. Example: Input: 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 Output: 4 这又是一道典型的DP题目，但是我依然没有任何思路。 解决办法： 首先考虑第一行和第一列，如果为’1’，则该位置上的DP数组为1，否则为0。 然后再考虑中间，以中间某个点为右下角的最大的正方形即为上方、左方和左上方为右下角的最大正方形中的最小值加一。 即动态规划递推式为：$$dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + 1$$ 123456789101112131415161718class Solution &#123;public: int maximalSquare(vector&lt;vector&lt;char&gt;&gt;&amp; matrix) &#123; if (matrix.empty() || matrix[0].empty()) return 0; int m = matrix.size(), n = matrix[0].size(), res = 0; vector&lt;vector&lt;int&gt;&gt; dp(m, vector&lt;int&gt;(n, 0)); for (int i = 0; i &lt; m; ++i) &#123; for (int j = 0; j &lt; n; ++j) &#123; if (i == 0 || j == 0) dp[i][j] = matrix[i][j] - '0'; else if (matrix[i][j] == '1') &#123; dp[i][j] = min(dp[i - 1][j - 1], min(dp[i][j - 1], dp[i - 1][j])) + 1; &#125; res = max(res, dp[i][j]); &#125; &#125; return res * res; &#125;&#125;;","tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://blog.zhaoziwen.com.cn/tags/leetcode/"}]},{"title":"Course Schedule","date":"2019-03-25T16:32:46.000Z","path":"2019/03/26/course-schedule/","text":"[LeetCode] 207. Course Schedule There are a total of n courses you have to take, labeled from 0 to n-1. Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1] Given the total number of courses and a list of prequisite pairs, is it possible for you to finish all courses? Example 1: Input: 2, [[1,0]]Output: trueExplanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So it is possible. Example 2: Input: 2, [[1,0],[0,1]]Output: falseExplanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible. 很容易看出这是一道检测图是否有环的题，但是由于接触的图像的题较少，所以目前很难写出跟图有关的代码。所以记录一下过程。 这里在生成有向图之后，DFS和BFS都可以解决此题。目前先看BFS。 定义一个二维数组graph来表示这个有向图，一维数组in来表示每个顶点的入度(离散数学)。然后定义一个queue变量，将所有入度为0的点放入队列中，然后开始遍历队列，从graph里遍历其间接的点，每达到一个新节点，将其入度减一，如果此时改点入度为0，则放入队列末尾。知道遍历万队列中所有的值，若此时还有节点的入度不为0，则说明环存在。 123456789101112131415161718192021222324252627class Solution &#123;public: bool canFinish(int numCourses, vector&lt;vector&lt;int&gt;&gt;&amp; prerequisites) &#123; vector&lt;vector&lt;int&gt; &gt; graph(numCourses, vector&lt;int&gt;(0)); vector&lt;int&gt; in(numCourses, 0); for (auto a : prerequisites) &#123; graph[a[1]].push_back(a[0]); ++in[a[0]]; &#125; queue&lt;int&gt; q; for (int i = 0; i &lt; numCourses; ++i) &#123; if (in[i] == 0) q.push(i); &#125; while (!q.empty()) &#123; int t = q.front(); q.pop(); for (auto a : graph[t]) &#123; --in[a]; if (in[a] == 0) q.push(a); &#125; &#125; for (int i = 0; i &lt; numCourses; ++i) &#123; if (in[i] != 0) return false; &#125; return true; &#125;&#125;; 其中还有DFS的解法，待解决~","tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://blog.zhaoziwen.com.cn/tags/leetcode/"}]},{"title":"Ubuntu初始化配置流程","date":"2019-03-24T16:02:12.000Z","path":"2019/03/25/ubuntu-start/","text":"以下记录一下Ubuntu的配置流程，持续更新 环境：ubuntu 16.04.6 Desktop 一、更新apt源1、源文件备份 1sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak 2、编辑源列表文件 1sudo vim /etc/apt/sources.list 3、将原来的列表删除，添加如下内容 123456789# 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse 4、更新源 12sudo apt-get updatesudo apt-get upgrade 二、转换中文及安装搜狗输入法1、在Language Support中增加汉语，然后选择输入法系统为fcitx 2、重启系统 3、打开官网，下载安装包 4、终端运行 1234sudo dpkg -i sogoupinyin_xxxx.deb# 若出错则运行下面的命令sudo apt-get -f install 5、重启 三、为root账户设置密码已经切换至root账户12sudo passwd root #为root账户设置密码su root #切换至root账户 四、安装Anaconda1、下载安装包 历史版本，该网页包含所有历史版本，其实5.2.0对应python3.6，5.3.0对应python3.5。 2、安装 12cd Downloadssh Anaconda3-xxx.sh 3、添加环境变量 123sudo vim /etc/profileexport PATH=~/anaconda3/bin:$PATH #在最后一行加入source /etc/profile 4、更换conda源 12345678910111213141516171819conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/conda config --set show_channel_urls yes##第三方源#Conda Forgeconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/#msys2conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/#biocondaconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/#menpoconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/menpo/#pytorchconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/ 5、更换pypi源 12pip install pip -U #升级pip到最新的版本pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple 五、安装git1sudo apt-get install git 六、安装python3.6，并更改默认python版本1、安装python3.6和pip 123456789101112131415161718# 安装python3.6sudo add-apt-repository ppa:jonathonf/python-3.6sudo apt-get updatesudo apt-get install python3.6# 安装pipapt-get install python-pip # 此时的默认python应该是python3.6，所以应该先执行下面的更改默认python版本后再安装pip## 如果安装pip之后出错vim /usr/bin/pip## 修改内容如下//修改前from pip import mainif __name__ == '__main__': sys.exit(main()) //修改后 from pip import __main__ //这行也要修改if __name__ == '__main__': sys.exit(__main__._main()) //增加__main__._ 2、更改默认python版本 1234567891011121314151617# 查看系统中可用的Python二进制文件ls /usr/bin/python*## Output:/usr/bin/python /usr/bin/python2-config /usr/bin/python3.6/usr/bin/python2 /usr/bin/python3 /usr/bin/python3.6m/usr/bin/python2.7 /usr/bin/python3.5 /usr/bin/python3m/usr/bin/python2.7-config /usr/bin/python3.5m /usr/bin/python-config# 更换至root账户# 罗列出所有可用的python替代版本的信息update-alternatives --list python## Output:update-alternatives: error: no alternatives for python# 更新替代列表update-alternatives --install /usr/bin/python python /usr/bin/python2.7 1update-alternatives --install /usr/bin/python python /usr/bin/python3.5 2update-alternatives --install /usr/bin/python python /usr/bin/python3.6 3 即替换成功，其中最后一个参数为优先级，数字越大，优先级越高 七、科学上网下面的流程基于ssr协议，此协议兼容原版ss协议。 1、下载ssr客户端 1git clone https://github.com/ssrbackup/shadowsocksr 2、配置ss文件 1234cd shadowsocksrcp config.json /etc/shadowsocks.json# 按照ssr的参数对下面的文件进行配置sudo vim /etc/shadowsocks.json 3、启动ssr客户端 1python shadowsocks/local.py -c /etc/shadowsocks.json # 此处python的版本为python3 4、转换HTTP代理 shadowsocks默认是用sock5协议的，对于终端的get、wget等走的是http协议的地方是无能为力的，所以需要转换成http代理，这里基于Polipo。 12sudo apt-get install polipo # 安装Poliposudo vim /etc/polipo/config # 修改配置文件 替换为一下内容： 123456789101112131415161718# This file only needs to list configuration variables that deviate# from the default values. See /usr/share/doc/polipo/examples/config.sample# and \"polipo -v\" for variables you can tweak and further information.logSyslog = falselogFile = \"/var/log/polipo/polipo.log\"socksParentProxy = \"127.0.0.1:1080\"socksProxyType = socks5chunkHighMark = 50331648objectHighMark = 16384serverMaxSlots = 64serverSlots = 16serverSlots1 = 32proxyAddress = \"0.0.0.0\"proxyPort = 8123 5、重启Polipo以及在终端使用代理： 123456/etc/init.d/polipo restartexport http_proxy=\"http://127.0.0.1:8123/\"curl www.google.com# 即可在终端只用代理# 取消代理unset http_proxy 6、配置浏览器 对于不同的游览器，配置方法不同，所以在此我们可以直接修改全局网络。 打开setting -&gt; Network -&gt; Network Proxy : Method Manual 下面所有栏都设置为127.0.0.1端口：8123，并应用到全局。 7、日常使用 每天打开电脑的状态是：全局代理打开，shadowsocks客户端并没有启动，所以浏览器并不能连接网络。 如果不需要科学上网，只需要按照第6步把网络代理关掉。 如果需要科学上网，需要开启shadowsocks服务并且有时需要开启Polipo服务 1234screen python shadowsocksr/shadowsocks/local.py -c /etc/shadowsocks.json# 在screen模式下，ctrl+a，然后d(detach)，或者直接关闭当前terminal，该进程即在后台运行# 重启polipo/etc/init.d/polipo restart 八、深度学习环境1、显卡驱动 123456789101112131415# 查看自己的显卡适合的驱动器版本号ubunut-drivers devices# 卸载原有驱动sudo apt-get remove --purge nvidia*# 添加ppa源到系统sudo add-apt-repository ppa:graphics-drivers/ppa# 更新源sudo apt-get update# 关闭图形界面sudo service lightdm stop# 屏幕变黑，按下ctrl+alt+f1进入命令号界面# 安装独显驱动sudo apt-get install nvidia-xxx# 查看是否正确安装nvidia-smi 2、安装cuda 附：Tensorflow不同版本与CUDA和CUDNN版本对应关系 版本 Python CUDA cuDNN tensorflow_gpu-1.11.0 3.5-3.6 9 7 tensorflow_gpu-1.10.0 3.5-3.6 9 7 tensorflow_gpu-1.9.0 3.5-3.6 9 7 tensorflow_gpu-1.8.0 3.5-3.6 9 7 tensorflow_gpu-1.7.0 3.5-3.6 9 7 tensorflow_gpu-1.6.0 3.5-3.6 9 7 tensorflow_gpu-1.5.0 3.5-3.6 9 7 tensorflow_gpu-1.4.0 3.5-3.6 8 6 tensorflow_gpu-1.3.0 3.5-3.6 8 6 tensorflow_gpu-1.2.0 3.5-3.6 8 5.1 tensorflow_gpu-1.1.0 3.5 8 5.1 tensorflow_gpu-1.0.0 3.5 8 5.1 123# 安装依赖（是否有用及必须未验证）sudo apt-get install mesa-common-devsudo apt-get install freeglut3-dev 到NVIDIA官网下载相应的CUDA版本的run文件 1234567sudo sh cudaXXXXXX.run#### Note: 在询问是否安装NVIDIA驱动的时候选择no，其他默认#修改环境变量vim ~/.bashrcexport PATH=/usr/local/cuda-8.0/bin$&#123;PATH:+:$&#123;PATH&#125;&#125;export LD_LIBRARY_PATH=/usr/local/cuda-8.0/lib64$&#123;LD_LIBRARY_PATH:+:$&#123;LD_LIBRARY_PATH&#125;&#125; 12345678# 验证cuda成功安装（可选）cd /usr/local/cuda-8.0/samples# 没有make，先安装makesudo apt-get install cmakesudo make -jcd ./bin/x86_64/linux/release./deviceQuery #如果结果中显示了NVIDIA显卡的相关信息，最后能看到Result = PASS就算安装成功 3、安装cuDNN 登录NVIDIA账号下载对应cuDNN版本（cuDNN vX.0 Library for xxx） 12345678910111213141516# 解压文件tar -zxvf cudnn-xxx.tgzcd cudasudo cp /include/cudnn.h /usr/local/cudaxxx/include/cd ../lib64sudo cp lib* /usr/local/cudaxxx/lib64sudo chmod a+r /usr/local/cuda/include/cudnn.h sudo chmod a+r /usr/local/cuda/lib64/libcudnn*# 更新软连接cd /usr/local/cuda/lib64/ sudo rm -rf libcudnn.so libcudnn.so.7 #删除原有动态文件，版本号注意变化，可在cudnn的lib64文件夹中查看 sudo ln -s libcudnn.so.7.0.2 libcudnn.so.7 #生成软衔接（注意这里要和自己下载的cudnn版本对应，可以在/usr/local/cuda/lib64下查看自己libcudnn的版本）sudo ln -s libcudnn.so.7 libcudnn.so #生成软链接sudo ldconfig -v #立刻生效 九、相关资源搭建深度学习平台","tags":[{"name":"ubuntu","slug":"ubuntu","permalink":"https://blog.zhaoziwen.com.cn/tags/ubuntu/"}]},{"title":"Largest Rectangle in Histogram & Maximal Rectangle","date":"2019-03-20T17:08:23.000Z","path":"2019/03/21/LRIH-and-MR/","text":"这两题在LeetCode上位置临近，它们之间存在一定的关联 [LeetCode] 84. Largest Rectangle in Histogram Given n non-negaive integers representing the histogram’s bar height where the width of each bar is 1, find the area of largest rectangle in the histogram. histogra Above is a histogram where width of each bar is 1, given height = [2, 1, 5, 6, 2, 3]. histogram_area The largest rectangle is shown in the shaded area, which has area = 10 unit. Example: Input: [2, 1, 5, 6, 2, 3] Output: 10 最初的想法是用DP，但是一直没能找出状态转移公式。所以这题的方法是遍历数组，每找到一个局部峰值(只要当前值大于紧随其后的值，就可以视为局部峰值)，就向前遍历所有的值，算出共同的矩形面积，每次对比保留最大值。至于为什么是局部峰值，可以这样来证明：如果不是局部峰值，意味着紧随其后的值大于等于当前值，那如果最大面积包括当前值，那毫无疑问也包括随后的值。所以目标区域一定结束在局部峰值。 12345678910111213141516171819// Pruning optimizeclass Solution &#123;public: int largestRectangleArea(vector&lt;int&gt; &amp;height) &#123; int res = 0; for (int i = 0; i &lt; height.size(); ++i) &#123; if (i + 1 &lt; height.size() &amp;&amp; height[i] &lt;= height[i + 1]) &#123; continue; &#125; int minH = height[i]; for (int j = i; j &gt;= 0; --j) &#123; minH = min(minH, height[j]); int area = minH * (i - j + 1); res = max(res, area); &#125; &#125; return res; &#125;&#125;; [LeetCode] 85. Maximal Rectangle Given a 2D binary matrix filled with 0’s and 1’s, find the largest rectangle containing only 1’s and return its area. Example: Input: [ ​ [“1”,”0”,”1”,”0”,”0”], ​ [“1”,”0”,”1”,”1”,”1”], ​ [“1”,”1”,”1”,”1”,”1”], ​ [“1”,”0”,”0”,”1”,”0”] ] Output: 6 这题确实对目前的我来讲过于复杂，一开始没有任何头绪，尝试往DP方向上靠，但是感觉转移方程过于复杂。后来找到了一种较为简单的方法。 对目标2D数组每一行进行切分，每一层向上都可以看做一个直方图，输入矩阵有多少行，就可以形成多少个直方图，每个直方图都调用上题的方法，就可以得到矩形面积。其中构造直方图的方法为：对于每一个点，如果是0，则赋0；如果是1，就赋之前的值(上一层)加1。 123456789101112131415161718192021222324252627282930class Solution &#123;public: int maximalRectangle(vector&lt;vector&lt;char&gt; &gt; &amp;matrix) &#123; int res = 0; vector&lt;int&gt; height; for (int i = 0; i &lt; matrix.size(); ++i) &#123; height.resize(matrix[i].size()); for (int j = 0; j &lt; matrix[i].size(); ++j) &#123; height[j] = matrix[i][j] == '0' ? 0 : (1 + height[j]); &#125; res = max(res, largestRectangleArea(height)); &#125; return res; &#125; int largestRectangleArea(vector&lt;int&gt; &amp;height) &#123; int res = 0; stack&lt;int&gt; s; height.push_back(0); for (int i = 0; i &lt; height.size(); ++i) &#123; if (s.empty() || height[s.top()] &lt;= height[i]) s.push(i); else &#123; int tmp = s.top(); s.pop(); res = max(res, height[tmp] * (s.empty() ? i : (i - s.top() - 1))); --i; &#125; &#125; return res; &#125;&#125;; 其中，这题仍然可以用DP的方法，不过看起来比较复杂，所以先暂时留着，附上链接，之后总结一下DP的流程只有再总结一下。 DP思路","tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://blog.zhaoziwen.com.cn/tags/leetcode/"}]},{"title":"用户数据报协议UDP详解","date":"2019-03-19T17:38:21.000Z","path":"2019/03/20/udp/","text":"概述UDP只在IP数据报服务之上增加了复用、分用以及差错检测的功能。UDP的主要特点 无连接。发送数据之前不需要建立连接，同时意味着减少了开销和发送前的时延。 尽最大努力交付，即不保证可靠交付。意味着主机不需要维持复杂的链接状态表。 面向报文。UDP对应用层下发的报文既不合并也不拆分，只添加首部后交给IP层。 没有拥塞控制。意味着网络出现的拥塞不会使主机发送频率降低。 UDP支持一对一、一对多、多对一和多对多的交互通信。 UPD首部开销小。只有8个字节，TCP首部20字节。 UDP的首部格式UDP首部只有8个字节，由四个字段组成，每个字段两个字节。各字段意义如下： 源端口。在需要对方回信时使用。不需要可用全0。 目的端口。在终点交付报文是必须使用。 长度。UDP用户数据报的长度，最小值为8（首部）。 检验和。检测UDP用户数据报在传输中是否有错。有错即丢弃。 当运输层从IP层收到UDP数据报时，就根据首部中的目的端口，把UDP数据报通过相应的端口，上交到最后的终点——应用程序。如果接收方UDP发现收到的报文中的目的端口号不正确，就丢弃该报文，并由网际控制报文ICMP发送“端口不可达”差错报文给发送方。虽然UDP需要使用到端口号，但由于UDP的通信是无连接的，因此不需要套接字。 u=925851693,2714828517-fm=26-gp=0 UDP在计算检验和时，在UDP用户数据报之前增加12个字节的伪首部（并不是真正的首部，既不向下传送也不向上递交，仅仅用于计算检验和） 计算检验和步骤： 把伪首部添加到UDP上； 计算初始是需要将检验和字段添零； 把所有位划分为16位（2字节）的字 把所有16位的字相加，如果遇到进位，则将高于16位的进位部分的值加到最低位上 将所有字相加得到的结果应该为一个16位的数，将该数取反则可以得到检验和","tags":[{"name":"计算机网络","slug":"计算机网络","permalink":"https://blog.zhaoziwen.com.cn/tags/计算机网络/"},{"name":"UDP","slug":"UDP","permalink":"https://blog.zhaoziwen.com.cn/tags/UDP/"}]},{"title":"Unique Binary Search Trees","date":"2019-03-19T16:54:11.000Z","path":"2019/03/20/unique-binary-search-trees/","text":"[LeetCode] 96. Given n, how many structurally unique BST’s that store values 1 … n ? Example: Input: 3 Output: 5 Explanation: Given n = 3, there are a total of 5 unique BST’s: 思路一递归： 空树和只有根结点时，也为BST。对于一点i，当其为根结点时，左子树的节点的个数为i-1（1, … , i-1），右子树的个数为n-i（i+1, … , n）。对于一个根来说，唯一二叉树的个数为左子树节点的个数乘以右子树的个数。 123456789101112class Solution &#123;public: int numTrees(int n) &#123; if(n&lt;=1) return 1; int sum=0; for(int i=1;i&lt;=n;++i) sum+=numTrees(i-1)*numTrees(n-i); return sum; &#125;&#125;; 思路二动态规划： 卡特兰数的递推公式： $$C_{0} = 1 \\ and \\ C_{n+1} = \\sum_{i=0}^{n}C_{i}C_{n-i} \\ for \\ n\\geq 0.$$ 123456789101112131415class Solution &#123;public: int numTrees(int n) &#123; vector&lt;int&gt; sumNode(n+1,0); sumNode[0]=1; sumNode[1]=1; for(int i=2;i&lt;=n;++i) for(int j=0;j&lt;i;++j) //j符合条件时，最大为i-1，对照公式 sumNode[i]+=sumNode[j]*sumNode[i-j-1]; return sumNode[n]; &#125;&#125;;","tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://blog.zhaoziwen.com.cn/tags/leetcode/"}]},{"title":"Word Search 之 DFS","date":"2019-03-19T16:36:42.000Z","path":"2019/03/20/word-search/","text":"[LeetCode] 79. Word Search Given a 2D board and a word, find if the word exists in the grid. The word can be constructed from letters of sequentially adjacent cell, where “adjacent” cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once. Example: board = [ ​ [‘A’, ‘B’, ‘C’, ‘E’] ​ [‘S’, ‘F’, ‘C’, ‘S’] ​ [‘A’, ‘D’, ‘E’, ‘E’] ] Given word = “ABCCED”, return true. Given word = “SEE”, return true. Given word = “ABCB”, return false. 这题不算难，但是没有想到深度优先遍历DFS，所以有点无从下手。 具体看代码： 1234567891011121314151617181920212223242526class Solution &#123;public: bool exist(vector&lt;vector&lt;char&gt;&gt;&amp; board, string word) &#123; if (board.empty() || board[0].empty()) return false; int m = board.size(), n = board[0].size(); vector&lt;vector&lt;bool&gt;&gt; visited(m, vector&lt;bool&gt;(n, false)); for (int i = 0; i &lt; m; ++i) &#123; for (int j = 0; j &lt; n; ++j) &#123; if (search(board, word, 0, i, j, visited)) return true; &#125; &#125; return false; &#125; bool search(vector&lt;vector&lt;char&gt;&gt;&amp; board, string word, int idx, int i, int j, vector&lt;vector&lt;bool&gt;&gt;&amp; visited) &#123; if (idx == word.size()) return true; int m = board.size(), n = board[0].size(); if (i &lt; 0 || j &lt; 0 || i &gt;= m || j &gt;= n || visited[i][j] || board[i][j] != word[idx]) return false; visited[i][j] = true; bool res = search(board, word, idx + 1, i - 1, j, visited) || search(board, word, idx + 1, i + 1, j, visited) || search(board, word, idx + 1, i, j - 1, visited) || search(board, word, idx + 1, i, j + 1, visited); visited[i][j] = false; return res; &#125;&#125;;","tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://blog.zhaoziwen.com.cn/tags/leetcode/"}]},{"title":"Edit Distance 编辑距离","date":"2019-03-18T17:01:23.000Z","path":"2019/03/19/edit-distance/","text":"[LeetCode] 72. Edit Distance Given two words word1 and word2, find the minimum number of operations required to convert word1 to word2 You have the following 3 operations permitted on a word: Insert a character Delete a character Replace a character Example: Input: word1 = “horse”, word2 = “ros” Output: 3 Explanation: horse -&gt; rorse rorse -&gt; rose rose -&gt; ros 这道题一开始是能想到实用动态规划的，但是题目理解有点问题，所以没能推出DP的初始状态和状态转移方程。 思路： 这里需要维护一个二维DP数组，其中dp[i][j]表示从word1的前i个字符转换到word2的前j个字符所需要的步骤。其中初始状态该二维数组第一行第一列很容易赋值，因为其中一个为空串，所以值为另一个字符串的长度。 以下用word1=”bbc”, word2=”abcd”为例： null a b c d null 0 1 2 3 4 b 1 1 1 2 3 b 2 2 1 2 3 c 3 3 2 1 2 所以状态转移方程为： if word1[i-1] == word2[j-1] dp[i][j] = dp[i-1][j-1] else dp[i][j] = min(dp[i-1][j-1], min(dp[i-1][j], dp[i][j-1])) + 1 12345678910111213141516171819class Solution &#123;public: int minDistance(string word1, string word2) &#123; int n1 = word1.size(), n2 = word2.size(); int dp[n1 + 1][n2 + 1]; for (int i = 0; i &lt;= n1; ++i) dp[i][0] = i; for (int i = 0; i &lt;= n2; ++i) dp[0][i] = i; for (int i = 1; i &lt;= n1; ++i) &#123; for (int j = 1; j &lt;= n2; ++j) &#123; if (word1[i - 1] == word2[j - 1]) &#123; dp[i][j] = dp[i - 1][j - 1]; &#125; else &#123; dp[i][j] = min(dp[i - 1][j - 1], min(dp[i - 1][j], dp[i][j - 1])) + 1; &#125; &#125; &#125; return dp[n1][n2]; &#125;&#125;;","tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://blog.zhaoziwen.com.cn/tags/leetcode/"}]},{"title":"Longest_valid_parentheses","date":"2019-03-13T15:58:12.000Z","path":"2019/03/13/longest-valid-parentheses/","text":"[LeetCode] 32. Longest Valid Parentheses Given a string containing just the characters ‘(‘ and ‘)’, find the length of the longest valid parentheses substring. Example: Input: “)()()” Output: 4 思路一：动态规划 dp[i]表示以当前位置为终点的最长长度，则只能在“)”处更新： 如果s[i-1-dp[i-1]]==’(‘，则说明当前位置可以和i-1-dp[i-1]位置匹配，dp[i] = dp[i-1]+2； 然后还要加上匹配位置之前的最长长度dp[i]+=dp[i-dp[i]]； 12345678910111213141516class Solution &#123;public: int longestValidParentheses(string s) &#123; int result = 0; s = ')' + s; vector&lt;int&gt; dp(s.length(),0); for(int i = 1; i &lt; s.length(); i++) &#123; if(s[i] == ')') &#123; if(s[i - 1 - dp[i - 1]] == '(') dp[i] = dp[i-1] + 2; dp[i] += dp[i-dp[i]]; &#125; result = max(result,dp[i]); &#125; return result; &#125;&#125;; 思路二：栈 定义start变量记录合法括号串的起始位置； 遍历字符串； 如果遇到左括号，则将当前下标压入栈； 如果遇到右括号： ​ 如果当前栈为空，则将下一个坐标位置记录到start ​ 如果不为空，则将栈顶元素取出： ​ 此时若栈为空，则更新“前面的结果”和“i-start+1”中的较大值 ​ 否则更新“前面的结果”和“i-栈顶元素”中的较大值 12345678910111213141516171819class Solution &#123;public: int longestValidParentheses(string s) &#123; int res = 0; int start = 0; stack&lt;int&gt; m; for(int i = 0; i &lt; s.size(); i++) &#123; if(s[i] == '(') m.push(i); else if(s[i] == ')') &#123; if(m.empty()) start = i + 1; else &#123; m.pop(); res = m.empty() ? max(res, i - start + 1) : max(res, i - m.top()); &#125; &#125; &#125; return res; &#125;&#125;;","tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://blog.zhaoziwen.com.cn/tags/leetcode/"}]},{"title":"递归之生成括号","date":"2019-03-12T15:48:48.000Z","path":"2019/03/12/generate-parentheses/","text":"[LeetCode] 22. Generate Parentheses Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses. For example, given n = 3, a solution set is: [ ​ “((()))” ​ “(()())” ​ “()(())” ​ “()()()” ] 和合法的情况下，任意时刻，左括号个数要大于等于右括号个数 1、当left个数大于right个数，非常情况，返回即可 2、left和right都等于0，临时变量中左右括号个数相等，所以将临时变量的值存入res中 3、其余情况下，先放左括号，再放右括号，然后递归。 12345678910111213141516class Solution &#123;public: vector&lt;string&gt; generateParenthesis(int n) &#123; vector&lt;string&gt; res; generateParenthesisDFS(n, n, \"\", res); return res; &#125; void generateParenthesisDFS(int left, int right, string out, vector&lt;string&gt; &amp;res) &#123; if(left &gt; right) return; if(left == 0 &amp;&amp; right == 0) res.push_back(out); else &#123; if(left &gt; 0) generathesisDFS(left - 1, right, out + '(', res); if(right &gt; 0) generathesisDFS(left, right - 1, out + ')', res); &#125; &#125;&#125; 特殊思路：找左括号，每找到一个左括号，就在其后面加一个完整的括号，最后再在开头加一个()，但是有时候会重复出现，即用set数据结构 12345678910111213141516171819202122class Solution &#123;public: vector&lt;string&gt; generateParenthesis(int n) &#123; set&lt;string&gt; t; if(n == 0) t.insert(\"\"); else &#123; vector&lt;string&gt; pre = generateParenthesis(n-1); for(auto a:pre) &#123; for(int i = 0; i &lt; a.size(); i++) &#123; if(a[i] == '(') &#123; a.insert(a.begin() + i + 1, '('); a.insert(a.begin() + i + 2, ')'); t.insert(a); a.erase(a.begin() + i + 1, a.begin() + i + 3); &#125; &#125; t.insert(\"()\" + a); &#125; &#125; return vector&lt;string&gt;(t.begin(), t.end()); &#125;&#125;","tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://blog.zhaoziwen.com.cn/tags/leetcode/"}]},{"title":"Median_of_two_sorted_arrays","date":"2019-03-11T13:51:00.000Z","path":"2019/03/11/Median-of-two-sorted-arrays/","text":"Median of two sorted arrays核心是将原问题转变成寻找第k小数的问题（假设两个原序列升序排列） 首先假设数组A和B的元素个数都大于k/2，比较A[k/2-1]和B[k/2-1]两个元素，这两个元素分别表示A的第k/2小的元素和B的第k/2小的元素。 1、A[k/2-1]&lt;B[k/2-1]，表示A[0]到A[k/2-1]的元素都在A和B合并之后的前k小的元素中，所以我们抛弃它。 2、A[k/2-1]&gt;B[k/2-1]，同上 3、A[k/2-1]=B[k/2-1]，这个数即第K小的数 [LeetCode] 4. Median of Two Sorted Arrays There are two sorted arrays nums1 and nums2 of size m and n respectively. Find the median of the two sorted arrays. The overall run time complexity should be O(log(m+n)). Example: nums1 = [1, 3] nums2 = [2] The midian is 2.0 1234567891011121314151617181920212223242526272829303132333435363738394041class Solution &#123;public: double findMedianSortedArrays(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) &#123; int m = nums1.size(); int n = nums2.size(); int total = m + n; if (total &amp; 0x1) return findKth(nums1, m, nums2, n, total / 2 + 1); else&#123; double num1 = findKth(nums1, m, nums2, n, total / 2); double num2 = findKth(nums1, m, nums2, n, total / 2 + 1); return (num1 + num2) / 2; &#125; &#125; double findKth(vector&lt;int&gt; a, int m, vector&lt;int&gt; b, int n, int k) &#123; if(m &gt; n) &#123; return findKth(b, n, a, m, k); &#125; if(m == 0) &#123; return b[k-1]; &#125; if(k == 1) &#123; return min(a[0], b[0]); &#125; int pa = min(k/2, m); int pb = k - pa; if(a[pa - 1] &lt; b[pb - 1]) &#123; a.erase(a.begin(), a.begin() + pa); return findKth(a, m-pa, b, n, k-pa); &#125; else if(a[pa-1] &gt; b[pb - 1]) &#123; b.erase(b.begin(), b.begin() + pb); return findKth(a, m, b, n-pb, k-pb); &#125; else &#123; return a[pa - 1]; &#125; &#125; &#125;; 常规方法： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647class Solution &#123;public: double findMedianSortedArrays(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) &#123; int m = nums1.size(); int n = nums2.size(); vector&lt;int&gt; array = merge(nums1, nums2); return ((double)(array[(m+n-1)/2]+array[(m+n)/2]))/2; &#125; vector&lt;int&gt; merge(vector&lt;int&gt; A, vector&lt;int&gt; B) &#123; vector&lt;int&gt; ret; int m = A.size(); int n = B.size(); int i = 0; int j = 0; while(i &lt; m &amp;&amp; j &lt; n) &#123; if(A[i] &lt;= B[j]) &#123; ret.push_back(A[i]); i ++; &#125; else &#123; ret.push_back(B[j]); j ++; &#125; &#125; if(i == m) &#123; while(j &lt; n) &#123; ret.push_back(B[j]); j ++; &#125; &#125; if(j == n) &#123; while(i &lt; m) &#123; ret.push_back(A[i]); i ++; &#125; &#125; return ret; &#125;&#125;;","tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://blog.zhaoziwen.com.cn/tags/leetcode/"}]},{"title":"String_rotate","date":"2019-03-10T07:39:15.000Z","path":"2019/03/10/string-rotate/","text":"字符串翻转与旋转翻转除了常规思路的左右位置对调，至此提供一种新的思路，用以解决其他特定环境下的相关问题。 利用迭代的思路对需要处理的字符串两边整体对换直到只有一位，如对于一个8位数字abcdefgh来讲，处理过程如下： abcdefgh -&gt; efghabcd -&gt; ghefcdab -&gt; hgfedcba 例如： [LeetCode] 190. Reverse Bits Reverse bits of a given 32 bits unsigned integer. Example : Input: 00000010100101000001111010011100 Output: 00111001011110000010100101000000 常规思路： 12345678class Solution &#123;public: uint32_t res = 0; for (int i = 0; i &lt; 32; i++) &#123; res |= (((n &gt;&gt; i) &amp; 1) &lt;&lt; (32 - i)); &#125; return res;&#125; 本文思路： 1234567891011class Solution &#123;public: uint32_t reverseBits(uint32_t n) &#123; n = (n &gt;&gt; 16) | (n &lt;&lt; 16); n = ((n &amp; 0xff00ff00) &gt;&gt; 8) | ((n &amp; 0x00ff00ff) &lt;&lt; 8); n = ((n &amp; 0xf0f0f0f0) &gt;&gt; 4) | ((n &amp; 0x0f0f0f0f) &lt;&lt; 4); n = ((n &amp; 0xcccccccc) &gt;&gt; 2) | ((n &amp; 0x33333333) &lt;&lt; 2); n = ((n &amp; 0xaaaaaaaa) &gt;&gt; 1) | ((n &amp; 0x55555555) &lt;&lt; 1); return n; &#125;&#125;; 旋转类似翻转字符串的方法，思路是先把前n-k个字符翻转一下，再把后k个字符翻转一下，最后再把整个数组翻转一下 例如： [LeetCode] 189. Rotate Array Given an array, rotate the array to the right by k steps, where k is non-negative. Example: Input: [1,2,3,4,5,6,7] and k = 3 Output: [5,6,7,1,2,3,4] 常规思路： 123456789class Solution &#123;public: void rotate(vector&lt;int&gt;&amp; nums, int k) &#123; vector&lt;int&gt; t = nums; for (int i = 0; k &lt; nums.size(); i++) &#123; nums[(i + k) % nums.size()] = t[i]; &#125; &#125;&#125; 本文思路： 123456789101112131415161718class Solution&#123;public: void rotate(vector&lt;int&gt;&amp; nums, int k) &#123; k %= nums.size(); reverse(nums, 0, nums.size() - 1); reverse(nums, 0, k - 1); reverse(nums, k, nums.size() - 1); &#125; void reverse(vector&lt;int&gt;&amp; nums, int left, int right) &#123; while(left &lt; right) &#123; int temp = nums[left]; nums[left] = nums[right]; nums[right] = temp; left++; right--; &#125; &#125;&#125;","tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://blog.zhaoziwen.com.cn/tags/leetcode/"}]}]